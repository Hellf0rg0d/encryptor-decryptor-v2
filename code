import java.awt.Color;
import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import javax.swing.JPasswordField;
import javax.swing.SwingConstants;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.util.Scanner;
import java.util.concurrent.ScheduledExecutorService;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;

public class Main {

	private JFrame frame;
	private JPasswordField raw;
	private JTextField d;
	private int c ,shift;
	private String last;
	private boolean show,morce;

	/**
	 * Launch the application.
	 */
	
	public static String conv(char j) {
		  String [] morse = new String[200];
		morse [97] = ".-";
		morse [98] = "-...";
		morse[99] = "-.-.";
		morse [100] = "-..";
		morse [101] = ".";
		morse [102] = "..-.";
		morse [103] = "--.";
		morse [104] = "....";
		morse [105] = "..";
		morse [106] = ".---";
		morse [107] = "-.-";
		morse [108] = ".-..";
		morse [109] = "--";
		morse [110] = "-.";
		morse [111] = "---";
		morse [112] = ".--.";
		morse [113] = "--.-";
		morse [114] = ".-.";
		morse [115] = "...";
		morse [116] = "-";
		morse [117]= "..-";
		morse [118] = "...-";
		morse [119] = ".--";
		morse [120] = "-..-";
		morse [121] = "-.--";
		morse [122] = "--..";
int qq = j;
if(qq>96 && qq <123) {
	return morse[qq];
}
else {
	return null;
}

	}
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main window = new Main();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Main() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		boolean isOn = Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK);
		Color aColor = Color.decode("#246EE9");
		frame = new JFrame();
		frame.setResizable(false);
		frame.setBounds(100, 100, 800,600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		frame.getContentPane().setBackground(aColor);
		
		JButton alert = new JButton("");
		alert.setIcon(new ImageIcon(Main.class.getResource("/icon/icons8-info-60 (1).png")));
		alert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(frame,
					    "Caps is turned on turn in off pls And restart the Application :)",
					    "Warning",
					    JOptionPane.WARNING_MESSAGE);
			}
		});
		alert.setBounds(726, 164, 50, 50);
		alert.setOpaque(false);
		alert.setContentAreaFilled(false);
		alert.setBorderPainted(false);
		alert.setFocusable(false);
		frame.getContentPane().add(alert);
		if(isOn == true) {
			alert.setEnabled(true);
			alert.setVisible(true);
		}
		else {
			alert.setVisible(false);
			alert.setEnabled(false);
		}
		
		JLabel lblNewLabel_1 = new JLabel("Type the raw text");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel_1.setForeground(Color.WHITE);
		lblNewLabel_1.setFont(new Font("Arial", Font.BOLD, 30));
		lblNewLabel_1.setBounds(10, 179, 784, 79);
		frame.getContentPane().add(lblNewLabel_1);
		frame.setBackground(new Color(255, 255, 0));
		
		raw = new JPasswordField();
		raw.setFont(new Font("Arial", Font.BOLD, 30));
		raw.setBounds(272, 251, 272, 36);
		frame.getContentPane().add(raw);
		
		
		d = new JTextField();
		d.setFont(new Font("Arial", Font.BOLD, 15));
		d.setBounds(309, 65, 86, 20);
		JLabel ans = new JLabel("");
		ans.setHorizontalAlignment(SwingConstants.CENTER);
		ans.setFont(new Font("Arial", Font.BOLD, 25));
		ans.setForeground(Color.WHITE);
		JButton en = new JButton("Encrypt");
		
	
		
		en.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(morce == true ) {
					try {
						String loc = System.getProperty("user.home");
						File file = new File(loc+"\\sc.txt");
						FileWriter wri = new FileWriter(file,true);
					//	wri.write("\n");
						 
					
				
					//JOptionPane.showMessageDialog(null, "Pay me $5 to get message","Trial/Error420",JOptionPane.ERROR_MESSAGE);
					//JOptionPane.showMessageDialog(null, "JK lol","Trial/Error420",JOptionPane.INFORMATION_MESSAGE);
					char a[] = raw.getText().toCharArray();
					int c ,shift;
					//System.out.println("Type the number to shift ");
					//d = word.nextInt();
					//word.close();
					shift = Integer.parseInt(d.getText());
					for(int size = 0;size<a.length;size++) {
						c = a[size];
						//System.out.println(c);
						if(a[size] > 96 &&a[size] < 123) {
							c = c+shift;
							if(c>122) {
								c =a[size]-26+shift;
								//System.out.print(" "+c +" ");
								//ans.setText(Character.toString((char)c));
								//System.out.print((char)c);
							}
							else {
								//ans.setText(Character.toString((char)c));
							//System.out.print((char)c);
							}
							wri.write(" ");
							wri.write(conv((char)c));
						}
						else {
						}					  
					}
					wri.close();
					Scanner sc = new Scanner(file);
					last = sc.nextLine();
			
					//System.out.println(last);
					sc.close();		
					//file.delete();
					if(show == true) {
						ans.setText(last);
						}
					else {
						Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(last),null);
					}
					}
					
					catch (Exception ex) {
						ex.printStackTrace();
						
					}
				}
				else {
				try {
					String loc = System.getProperty("user.home");
					File file = new File(loc+"\\sc.txt");
					FileWriter wri = new FileWriter(file,true);
				//	wri.write("\n");
					 
				
			
				//JOptionPane.showMessageDialog(null, "Pay me $5 to get message","Trial/Error420",JOptionPane.ERROR_MESSAGE);
				//JOptionPane.showMessageDialog(null, "JK lol","Trial/Error420",JOptionPane.INFORMATION_MESSAGE);
				char a[] = raw.getText().toCharArray();
				int c ,shift;
				//System.out.println("Type the number to shift ");
				//d = word.nextInt();
				//word.close();
				shift = Integer.parseInt(d.getText());
				for(int size = 0;size<a.length;size++) {
				
					
					c = a[size];
				if(c<=96 || c >= 123) {
					wri.write((char)c);
				}
					//System.out.println(c);
					if(a[size] > 96 &&a[size] < 123) {
						c = c+shift;
						if(c>122) {
							c =a[size]-26+shift;
							//System.out.print(" "+c +" ");
							//ans.setText(Character.toString((char)c));
							//System.out.print((char)c);
						}
						else {
							//ans.setText(Character.toString((char)c));
						//System.out.print((char)c);
						}
						wri.write((char)c);
					}
					else {
					}					  
				}
				wri.close();
				Scanner sc = new Scanner(file);
				last = sc.nextLine();
		
				//System.out.println(last);
				sc.close();		
				file.delete();
				if(show == true) {
					ans.setText(last);
					}
				else {
					Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(last),null);
				}
				}
				
				catch (Exception ex) {
					ex.printStackTrace();
					
				}
			}
			}
				
		});
		en.setForeground(Color.WHITE);
		en.setFont(new Font("Arial", Font.BOLD, 25));
		en.setOpaque(true);
		en.setFocusable(false);
		en.setContentAreaFilled(false);
		en.setBorderPainted(false);
		en.setBounds(237, 298, 143, 36);
		
		ans.setBounds(10, 352, 784, 30);
		frame.getContentPane().add(ans);
		frame.getContentPane().add(en);
		JLabel lblNewLabel = new JLabel("Number of characters to shift");
		lblNewLabel.setFont(new Font("Arial", Font.BOLD, 20));
		lblNewLabel.setForeground(Color.WHITE);
		lblNewLabel.setBounds(249, 11, 295, 55);
		frame.getContentPane().add(lblNewLabel);
		
		frame.getContentPane().add(d);
		d.setColumns(10);
		JLabel lblNewLabel_2 = new JLabel("Max is 10");
		lblNewLabel_2.setFont(new Font("Arial", Font.BOLD, 17));
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setBounds(420, 64, 86, 20);
		frame.getContentPane().add(lblNewLabel_2);
		
		JButton info = new JButton("");
		info.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, " # This is an encryption and decrypting device there's no output visible to the user by default  \n  # By default the output is directly copied into your clipboard. \n # You can change settings by clicking on settings logo. \n #The word must be Case-sensetive i.e... Using Capslock is Strictly discouraged! ","Info",JOptionPane.INFORMATION_MESSAGE);
			}
		});
		info.setIcon(new ImageIcon(Main.class.getResource("/icon/icons8-question-mark-50.png")));
		info.setBounds(725, 13, 48, 50);
		info.setOpaque(false);
		info.setContentAreaFilled(false);
		info.setBorderPainted(false);
		info.setFocusable(false);
		frame.getContentPane().add(info);
		
	
		JButton decrypt = new JButton("Decrypt");
		decrypt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					String loc = System.getProperty("user.home");
					File file = new File(loc+"\\sc.txt");
					FileWriter wri = new FileWriter(file,true);
				//	wri.write("\n");
					 
				
			
				//JOptionPane.showMessageDialog(null, "Pay me $5 to get message","Trial/Error420",JOptionPane.ERROR_MESSAGE);
				//JOptionPane.showMessageDialog(null, "JK lol","Trial/Error420",JOptionPane.INFORMATION_MESSAGE);
				char a[] = raw.getText().toCharArray();
				int c ,shift;
				//System.out.println("Type the number to shift ");
				//d = word.nextInt();
				//word.close();
				shift = Integer.parseInt(d.getText());
				for(int size = 0;size<a.length;size++) {
					c = a[size];
					if(c<=96 || c >= 123) {
						wri.write((char)c);
					}
					if(a[size] > 96 &&a[size] < 123) {
						c = c-shift;
						if(c<97) {
							c =a[size]+26-shift;
							//System.out.print(" "+c +" ");
							//ans.setText(Character.toString((char)c));
							//System.out.print((char)c);
						}
						else {
							//ans.setText(Character.toString((char)c));
						//System.out.print((char)c);
						}
					wri.write((char)c);
					}
					else {
					}	
					
				}
				wri.close();
				Scanner sc = new Scanner(file);
				last = sc.nextLine();
				//ans.setText(sc.next());
				//System.out.println(last);
				sc.close();		
				file.delete();
				if(show == true) {
					ans.setText(last);
					}
				else {
					Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(last),null);
				}
				}
				catch (Exception ex) {
			    ex.printStackTrace();
					
				}
			}
			
		});
		decrypt.setForeground(Color.WHITE);
		decrypt.setFont(new Font("Arial", Font.BOLD, 25));
		decrypt.setBounds(402, 298, 140, 39);
		decrypt.setOpaque(false);
		decrypt.setContentAreaFilled(false);
		decrypt.setBorderPainted(false);
		decrypt.setFocusable(false);
		frame.getContentPane().add(decrypt);
		
		JButton setting = new JButton("");
		setting.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFrame frames = new JFrame();
				frames.setVisible(true);
				frames.setTitle("Settings v2");
				frames.setBounds(0, 0, 500, 300);
				frames.getContentPane();
				frames.getContentPane().setLayout(null);
				JCheckBox jcb = new JCheckBox();
				JCheckBox jcb2 = new JCheckBox();
				if(morce == true ) {
					jcb2.setSelected(true);
				}
				else {
					jcb2.setSelected(false);
				}
				if(show == true) {
					jcb.setSelected(true);
				}
				else {
					jcb.setSelected(false);
				}
				jcb.setFocusable(false);
				jcb2.setFocusable(false);
				jcb.setText(" Show Decrypted/Encrypted word? ");
				jcb.setBounds(2, 5, 422, 23);
				jcb.setFont(new Font("Arial", Font.BOLD, 20));
				jcb.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						if(jcb.isSelected()) {
						show = true;
					}
						else {
							show = false;
						}
					}
				});
				frames.getContentPane().add(jcb);
				jcb2.setText(" Morse Code ");
				jcb2.setBounds(6, 73, 422, 23);
				jcb2.setFont(new Font("Arial", Font.BOLD, 20));
				jcb2.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						if(jcb2.isSelected()) {
						morce = true;
					}
						else {
							morce = false;
						}
					}
				});
				frames.getContentPane().add(jcb2);
			}
		});
		setting.setIcon(new ImageIcon(Main.class.getResource("/icon/icons8-gear-50.png")));
		setting.setBounds(726, 91, 50, 50);
		setting.setOpaque(false);
		setting.setContentAreaFilled(false);
		setting.setBorderPainted(false);
		setting.setFocusable(false);
		frame.getContentPane().add(setting);
		
	
		
		
		
		JLabel background = new JLabel("");
		background.setIcon(null);
		background.setBounds(-16, 0, 800, 600);
		frame.getContentPane().add(background);
		

		
		
		
	
		
		
		
	
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
